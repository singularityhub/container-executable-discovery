name: "container cache generator"
description: "Generate a cache of container executable paths for a listing of containers."
inputs:
  token:
    description: GitHub token (required for pull request)
    required: false
  root:
    description: Path of the cache roots (defaults to PWD)
    required: false
  listing:
    description: text file with listing of containers, one per line.
    required: true
  namespace:
    description: namespace to add to each container in the listing (optional)
    required: false
  org-letter-prefix:
    description: set to true to add a letter directory before the organzation name (e.g., docker.io/l/library/ubuntu:latest)
    required: true
    default: false
  repo-letter-prefix:
    description: set to true to add a letter directory before the repository name (e.g., docker.io/library/u/ubuntu:latest)
    required: true
    default: false
  registry-letter-prefix:
    description: set to true to add a letter directory before the registry name (e.g., d/docker.io/library/ubuntu:latest)
    required: true
    default: false
  dry_run:
    description: don't push to update branch (dry run only)
    required: false
    default: false
  branch:
    description: branch to open pull request against
    required: false
    default: main

runs:
  using: "composite"
  steps:
    - name: Install shpc and Guts
      env:
        action_path: ${{ github.action_path }}
      run: |
        pip install git+https://github.com/singularityhub/singularity-hpc@main
        pip install git+https://github.com/vsoch/pipelib@main
        pip install git+https://github.com/singularityhub/guts@main
        pip install -r ${action_path}/scripts/dev-requirements.txt
      shell: bash

    - name: Set root
      env:
        root: ${{ inputs.root }}
      run: |
        if [ "${root}" == "" ]; then
            root=$(pwd)
        fi
        echo "root=${root}" >> $GITHUB_ENV
      shell: bash

    - name: Update Cache
      id: update
      env:
        registry_prefix: ${{ inputs.registry-letter-prefix }}
        repo_prefix: ${{ inputs.repo-letter-prefix }}
        org_prefix: ${{ inputs.org-letter-prefix }}
        namespace: ${{ inputs.namespace }}
        listing: ${{ inputs.listing }}
        root: ${{ env.root }}
        action_path: ${{ github.action_path }}
      run: |
        cmd="python ${action_path}/scripts/update_containers.py --root ${root}" 

        if [ "${repo_prefix}" == "true" ]; then
            cmd="${cmd} --repo-letter-prefix"
        elif [ "${org_prefix}" == "true" ]; then
            cmd="${cmd} --org-letter-prefix"
        elif [ "${registry_prefix}" == "true" ]; then
            cmd="${cmd} --registry-letter-prefix"
        fi
        if [ "${namespace}" != "" ]; then
            cmd="${cmd} --namespace ${namespace}"
        fi

        # Add the listing file
        cmd="${cmd} ${listing}"
        echo "${cmd}"
        $cmd
      shell: bash

    - name: Calculate frequency
      env:
        root: ${{ env.root }}
        action_path: ${{ github.action_path }}
      run: |
        cmd="python ${action_path}/scripts/calculate_frequency.py --root ${root}"
        echo "${cmd}"
        $cmd
      shell: bash

    - name: Preview Cache
      env:
        root: ${{ env.root }}
      run: |
        sudo apt-get install -y tree || apt-get install -y tree
        tree ${root} 
      shell: bash

    - name: Checkout Update branch
      if: (inputs.dry_run != 'true')
      env:
        root: ${{ env.root }}
        GITHUB_TOKEN: ${{ inputs.token }}
        BRANCH_AGAINST: ${{ inputs.branch }}
      run: |
        printf "GitHub Actor: ${GITHUB_ACTOR}\n"
        git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@users.noreply.github.com"
        git config --global pull.rebase true
        git add ${root}/* || echo "No files to add"
        git add ${root}/*/* || echo "No nested files to add"
        git add ${root}/counts.json
        git add ${root}/skips.json
        git status
        if git diff-index --quiet HEAD --; then
           printf "No changes\n"
        else
           export OPEN_PULL_REQUEST=1
           printf "Changes\n"
           git commit -a -m "Automated deployment with updated cache $(date '+%Y-%m-%d')"
           git push origin ${BRANCH_AGAINST}
        fi
      shell: bash
